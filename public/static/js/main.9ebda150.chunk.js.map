{"version":3,"sources":["components/LaunchItem.tsx","components/MissionKey.tsx","components/Launches.tsx","components/Launch.tsx","logo.png","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","classNames","format","to","MissionKey","LAUNCH_QUERY","gql","Launches","useQuery","loading","error","data","launches","map","Launch","props","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","cache","InMemoryCache","App","src","logo","alt","style","width","display","margin","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9ebda150.chunk.js","sourcesContent":["import React from 'react'\nimport Moment from 'react-moment'\nimport classNames from 'classnames'\nimport { Link } from 'react-router-dom'\n\nexport default function LaunchItem({ launch: { flight_number, mission_name, launch_date_local, launch_success } }) {\n    return (\n        <div className=\"card card-body mb-3\">\n            <div className=\"col-md-9\">\n                <h4>\n                    Mission:{' '}\n                    <span\n                        className={classNames({\n                            'text-success': launch_success,\n                            'text-danger': !launch_success,\n                        })}\n                    >\n                        {mission_name}\n                    </span>\n                </h4>\n\n                <p>\n                    Date : <Moment format=\"DD/MM/YYYY HH:mm\">{launch_date_local}</Moment>\n                </p>\n            </div>\n            <div className=\"col-md-3\">\n                <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">\n                    Launch Details\n                </Link>\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function MissionKey() {\n    return (\n        <div className=\"my-3\">\n            <p>\n                <span className=\"px-3 mr-2 bg-success\" /> = Success\n            </p>\n            <p>\n                <span className=\"px-3 mr-2 bg-danger\" /> = Fail\n            </p>\n        </div>\n    )\n}\n","import React, { Component, Fragment } from 'react'\nimport { useQuery, gql } from '@apollo/client'\n\nimport LaunchItem from './LaunchItem'\nimport MissionKey from './MissionKey'\n\nconst LAUNCH_QUERY = gql`\n    {\n        launches {\n            flight_number\n            mission_name\n            launch_year\n            launch_date_local\n            launch_success\n            rocket {\n                rocket_id\n                rocket_name\n                rocket_type\n            }\n        }\n    }\n`\n\nexport function Launches() {\n    const { loading, error, data } = useQuery(LAUNCH_QUERY)\n\n    if (loading) return <h4>Loading...</h4>\n    if (error) return <h4>Error</h4>\n\n    return (\n        <Fragment>\n            <h1 className=\"display-4 my-3\">Launches</h1>\n            <MissionKey />\n            <Fragment>\n                {data.launches.map((launch) => (\n                    <LaunchItem key={launch.flight_number} launch={launch} />\n                ))}\n            </Fragment>\n        </Fragment>\n    )\n}\n","import React, { Component, Fragment } from 'react'\nimport { gql, useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\nimport classNames from 'classnames'\n\nconst LAUNCH_QUERY = gql`\n    query LaunchQuery($flight_number: Int!) {\n        launch(flight_number: $flight_number) {\n            flight_number\n            mission_name\n            launch_year\n            launch_success\n            launch_date_local\n            rocket {\n                rocket_id\n                rocket_name\n                rocket_type\n            }\n        }\n    }\n`\n\nexport default function Launch(props) {\n    let { flight_number } = props.match.params\n    flight_number = parseInt(flight_number)\n\n    const { loading, error, data } = useQuery(LAUNCH_QUERY, { variables: { flight_number } })\n\n    if (loading) return <h4>Loading...</h4>\n    if (error) return <h4>Error</h4>\n\n    const {\n        mission_name,\n        launch_year,\n        launch_success,\n        rocket: { rocket_id, rocket_name, rocket_type },\n    } = data.launch\n\n    return (\n        <div>\n            <h1 className=\"display-4 my-3\">\n                <span className=\"text-dark\">Mission:</span> {mission_name}\n            </h1>\n            <h4 className=\"mb-3\">Launch Details</h4>\n            <ul className=\"list-group\">\n                <li className=\"list-group-item\">Flight Number: {flight_number}</li>\n                <li className=\"list-group-item\">Launch Year: {launch_year}</li>\n                <li className=\"list-group-item\">\n                    Launch Successful:{' '}\n                    <span\n                        className={classNames({\n                            'text-success': launch_success,\n                            'text-danger': !launch_success,\n                        })}\n                    >\n                        {launch_success ? 'Yes' : 'No'}\n                    </span>\n                </li>\n            </ul>\n\n            <h4 className=\"my-3\">Rocket Details</h4>\n            <ul className=\"list-group\">\n                <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\n                <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\n                <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\n            </ul>\n            <hr />\n            <Link to=\"/\" className=\"btn btn-secondary\">\n                Back\n            </Link>\n        </div>\n    )\n}\n","export default __webpack_public_path__ + \"static/media/logo.8ec84ca7.png\";","import React from 'react'\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\n\nimport { Launches } from './components/Launches'\nimport Launch from './components/Launch'\n\nimport './App.css'\nimport './bootstrap.min.css'\nimport logo from './logo.png'\n\nconst client = new ApolloClient({\n    uri: '/graphql',\n    cache: new InMemoryCache(),\n})\n\nfunction App() {\n    return (\n        <ApolloProvider client={client}>\n            <Router>\n                <div className=\"container\">\n                    <img src={logo} alt=\"SpaceX logo\" style={{ width: 500, display: 'block', margin: 'auto' }} />\n\n                    <Route exact path={'/'} component={Launches} />\n                    <Route exact path={'/launch/:flight_number'} component={Launch} />\n                </div>\n            </Router>\n        </ApolloProvider>\n    )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}